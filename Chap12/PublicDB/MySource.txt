package com.example.publicdb;

import androidx.appcompat.app.AppCompatActivity;

import android.content.Context;
import android.content.res.AssetManager;
import android.os.Bundle;
import android.widget.Spinner;
import android.widget.TextView;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;

public class MainActivity extends AppCompatActivity {
    //외부데이터베이스 연결(활용)...복잡하다고함.
    //내패키지안에 DB가 있어야 함.
    /*
    이미존재하는 자료를 DB로 활용
    1.assets폴더에 복사
    2.assets폴더에 있는 것을 buffer에다가 byte 단위로 하나하나씩 옮겨담는다.(ReadBuffer)
    3.readerBuffer(차에서 내린다.)/writeBuffer(창고에 적재)
      패키지안에 database폴더에 옮겨서 저장
    4.SQLiteDatabase 로 활용 .
     */
    Spinner spCity,spName;
    TextView tvResult;
    Boolean check;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        spCity = (Spinner)findViewById(R.id.spCity);
        spName = (Spinner)findViewById(R.id.spName);
        tvResult = (TextView)findViewById(R.id.tvResult);
        //DB가 없으면....
        check = isCheckDB(this);    //DB 유무..
        try {
            if (!check) {
                copyDB(this);   //메모리에 옮기는 것..==>try..catch..
            }
        }catch(Exception e) {
            //DB를 저장할 수 없습니다.
        }
    }
    //DB가 database폴더에 없거나 크기가 다르면 false(copyDB에 갔다와라...) 같으면 true;
    public boolean isCheckDB(Context context) {
        //db설치경로;
        String filePath = "/data/data/com.example.publicdb/database/PetHospDB.db";
        //file을 다루는 거니까..
        File file = new File(filePath);
        long newdb_size = 0;
        long olddb_size = file.length();
        //Asset폴더를 다루는 매니저 AssetManager
        AssetManager manager = context.getAssets(); //Asset Folder에 접근가능;
        try {
            //상기 8장 sdcard 3가지(p332)
            //접근
            //내부메모리
            //내앱의 폴더 접근하는 방법 : InputStream
            InputStream inputS = manager.open("PetHospDB.db");
            newdb_size = inputS.available();
        } catch (IOException e) {
            //파일이 존재하지 않아요.
        }
        if(file.exists()) {
            //처음에는 존재하지 않는다.
            //두번째부터는 존재
            //
            if(newdb_size != olddb_size) {
                return false;
            } else {
                return true;
            }
        }

        return false;
    }
    //assets폴더에 있는 DB를 database폴더에 옮기는 작업;
    public void copyDB(Context context) {
        AssetManager manager = context.getAssets();
        String folderPath = "/data/data/com.example.publicdb/database";
        String filePath = "/data/data/com.example.publicdb/database/PetHospDB.db";
        File folder = new File(folderPath);
        File file = new File(filePath);
        //DB를 옮긴다.
        FileOutputStream fos = null;
        BufferedOutputStream bos = null;
        try {
            InputStream inputS = manager.open("PetHostDB.db");
            BufferedInputStream bis = new BufferedInputStream(inputS);
            if(!folder.exists()) { //database폴더가 있느냐?????????????
                folder.mkdir();
            }
            //이미존재하면 카피 않해준다.
            if(file.exists()) {
               //기존 파일을 삭제한 후 다시 파일을 만들어준다.
               file.delete();
               file.createNewFile();
            }
            //
            fos = new FileOutputStream(file);
            bos = new BufferedOutputStream(fos);
            int read = -1;
            //copy는 byte단위
            byte buffer[] = new byte[1024];     //1M제한
            //db를 옮겼는데 0kb인경우
            while ((read=bis.read(buffer,0,1024))!= -1) {
                bos.write(buffer,0,read);
            }
            bos.flush();
            bos.close();
            fos.close();
            bis.close();
            inputS.close();
        } catch (IOException e) {
            //파일을 저장할 수 없습니다.
        }
    }
}
